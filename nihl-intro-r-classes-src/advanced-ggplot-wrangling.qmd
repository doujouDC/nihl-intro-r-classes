---
title: "Advanced GGPlot Data Wrangling: Preprocessing"
format: docx
editor: visual
---

# Original RNA Data

Adapted from: [Chapter 5 Manipulating and analyzing data with dplyr](https://uclouvain-cbio.github.io/WSBIM1207/sec-dplyr.html)

## Download the file from GitHub

```{r}
# download.file(url = "https://raw.githubusercontent.com/UCLouvain-CBIO/WSBIM1207/master/data/rnaseq.csv",
#               destfile = "../data-raw/rnaseq.csv")
```

## Read in the RNA Data

```{r}
rna <- read_csv("../data-raw/rnaseq.csv")
```

# Create the RNA Fold Change Object

In prepping the data for plotting, we are going to prepare a table representing for each gene, the fold-changes (in log values) between timepoint 8 and timepoint 0, and the fold-changes between timepoint 8 and timepoint 0

```{r}
rna_fc <- rna %>%
  mutate(expression_log = log(expression)) %>%
  group_by(gene, time) %>%
  summarize(mean_exp = mean(expression_log)) %>%
  pivot_wider(names_from = time,
              values_from = mean_exp) %>%
  mutate(time_8_vs_0 = `8` - `0`, time_4_vs_0 = `4` - `0`) %>%
  select(gene, time_8_vs_0, time_4_vs_0)
```

We can save the table as a CSV file in our `data-output` folder

```{r}
write_csv(rna_fc, file = "../data-output/rna_fc.csv")
```

From: https://uclouvain-cbio.github.io/WSBIM1207/sec-vis.html

We can apply log2 transformation to have a more symmetric distribution. Note that we add here a small constant value (`+1`) to avoid having `-Inf` values returned for expression values equal to 0.

```{r}
rna <- rna %>%
  mutate(expression_log = log2(expression + 1))
```

To this end, we first need to compute the means of the log-transformed expression values by gene and time then the log fold changes by subtracting the mean log expressions between time 8 and time 0 and between time 4 and time 0. Note that we also include here the gene biotype that we will use later on to represent the genes. We will save the fold changes in a new data frame called `rna_fc.`

```{r}
rna_fc <- rna %>% select(gene, time,
                         gene_biotype, expression_log) %>%
  group_by(gene, time, gene_biotype) %>%
  summarize(mean_exp = mean(expression_log)) %>%
  pivot_wider(names_from = time,
              values_from = mean_exp) %>%
  mutate(time_8_vs_0 = `8` - `0`, time_4_vs_0 = `4` - `0`)
```

# Prep the data for Line Charts

Let's calculate the mean expression per duration of the infection for the 10 genes having the highest log fold changes comparing time 8 versus time 0.

First, we need to select the genes and create a subset of `rna` called `sub_rna` containing the 20 selected genes, then we need to group the data and calculate the mean gene expression within each group:

```{r}
genes_selected <- rna_fc %>%
    arrange(desc(time_8_vs_0)) %>%
    head(20) %>%
    pull(gene)

sub_rna <- rna %>%
    filter(gene %in% genes_selected)
```

We are now ready to export this data so that it can be used for the Advanced ggplot class:

```{r}
write_csv(sub_rna, file = "../data-output/sub_rna.csv")
```

