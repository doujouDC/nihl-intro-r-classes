---
title: "Introduction to Project Management in RStudio: Sample Document"
date: "`r Sys.Date()`"
---

Scientific Reproducibility

According to the U.S. National Science Foundation (NSF) subcommittee on reproducibility in science \[\@\]:

Science should routinely evaluate the reproducibility of findings that enjoy a prominent role in the published literature. To make reproduction possible, efficient, and informative, researchers should sufficiently document the details of the procedures used to collect data, to convert observations into analyzable data, and to perform data analysis.

Reproducibility refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator. Reproducibility is a minimum necessary condition for a finding to be considered rigorous, believable, and informative.

## General Recommendations

Adapted from: \[\@\]

### Don't Touch the Raw Data

Don't ever do analysis on the original data, or, if you do, then explain what you did to the data.

### Self-documenting and Reproducible Code

More about this in the second part of this class. However, consider writing your reports or papers in markdown. Markdown combines text with code.

## Use Open Formats

Use open formats as much as possible. That means sharing your data in csv or tab-delimited format.

A lot of large companies and government organizations use markdown for their publishing and research.

# Code Execution Options

There are a wide variety of options available for customizing output from [executed code](https://quarto.org/docs/computations/execution-options.html). All of these options can be specified globally. We have already seen an example of this in the YAML header:

---
title: "Project Management and Reproducibility in RStudio: Part 2"
author: "Doug Joubert"
date: "`r Sys.Date()`"
format: docx
toc: true
toc-location: body
fig-width: 6
fig-height: 4
execute:
  echo: false
---

Options can also be specified in specific code-blocks.

```{r}
library(tidyverse)
ggplot(airquality, aes(Temp, Ozone)) + 
        geom_point() + 
        geom_smooth(method = "loess", se = FALSE)
```


## Code Chunk Options

There are over 50 different code chunk options. Wow, that is a lot. Obviously we will not go over all of them, but they fall into several larger categories including: code evaluation, text output, code style, cache options, plot output and animation.

You can find a complete list of code chunk options on Knitr developer, Yihui Xie's, [online guide to knitr](https://yihui.org/knitr/options/). Or, you can find a brief list of all options on the R Markdown Reference guide on page 3 accessible through the RStudio Interface by navigating to the main menu bar `Help > Cheat Sheets > R Markdown Reference Guide`.

The chunk name is the only value other than `r` in the code chunk options that doesn't require a tag (i.e. the "= VALUE" part of `option = VALUE`). So chunk options will always require a tag, and the syntax will be in the form:

`{r chunk-label, option = VALUE}`

The option always follows the code chunk label (don't forget to add a `,` after the label either).

Good Practices for Managing Projects in RStudio

Practice Good File Organization

Although there is no "best" way to lay out a project, there are some general principles to adhere to that will make project management easier.

[Good Enough Practices for Scientific Computing](http://swcarpentry.github.io/good-enough-practices-in-scientific-computing/) gives the following recommendations for project organization \[\@\]:

Each project in its own directory, which is named after the project
Text documents associated with the project in the doc directory
Raw data and metadata in the data directory (raw-data)
Files generated during cleanup and analysis in a results directory
Project's scripts and programs in the src directory
Programs brought in from elsewhere or compiled locally in the bin directory

Name all files to reflect their content or function

Additional files to include:

[README file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes), to communicate important information about your project [LICENSE file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository), so that others are free to use, change, and distribute the software [CITATION.cff file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files), to let others know how you would like them to cite your work

Additional recommendations for projects and creating folders is covered in the Introduction to R and RStudio class. Class handouts are available upon request.

## Practices for Naming Files

Three principles for file names 1. Machine readable 2. Human readable 3. Plays well with default ordering
